import sqlite3
from loader import my_bot, history_result, logger
from states.User_cls import User
from utils.main_scripts import introduce, city_choice, rename


bot_db = sqlite3.connect('database/telegram_bot_db', check_same_thread=False)
cursor = bot_db.cursor()


@logger.catch
@my_bot.message_handler(commands=['start'])
def start_command(message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –∫–æ–º–∞–Ω–¥—É START.
    –§—É–Ω–∫—Ü–∏—è:
        - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î. –ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ë–î –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–ñ
            - –ª–∏–±–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è;
            - –ª–∏–±–æ –≤—ã–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ-–∫–æ–º–∞–Ω–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ-–±–æ—Ç–µ.
    """
    logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É start".format(message.chat.id))
    cursor.execute("""SELECT *
                            FROM users
                            WHERE bot_user_id = :ID""", {'ID': message.chat.id})
    user = cursor.fetchone()
    bot_db.commit()
    if user is not None:
        my_bot.send_message(message.chat.id, '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}üëã!\n'
                                             '‚Üô–û—Ç–∫—Ä–æ–π –º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É!'.format(name=user[1]))
    else:
        my_bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —Å—Ç—Ä–∞–Ω–Ω–∏–∫ üëã'
                                             '\n–Ø –±–æ—Ç —Å–∞–π—Ç–∞ Hotels.com'
                                             '\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å '
                                             '–æ—Ç–µ–ª—å –≤ –ª—é–±–æ–π —Å—Ç—Ä–∞–Ω–µ.')
        msg = my_bot.send_message(message.chat.id, '–ö–∞–∫ —è –º–æ–≥—É –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?')
        my_bot.register_next_step_handler(msg, introduce)


@logger.catch
@my_bot.message_handler(commands=['history'])
def history_command(message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –∫–æ–º–∞–Ω–¥—É HISTORY.
    –§—É–Ω–∫—Ü–∏—è –≤—ã–≥—Ä—É–∂–∞–µ—Ç –∏–∑ –ë–î:
        - –ø—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;
        - –¥–∞—Ç—É –∫–æ–º–∞–Ω–¥—ã;
        - —Å–ø–∏—Å–æ–∫ –æ—Ç–µ–ª–µ–π.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ-–∫–æ–º–∞–Ω–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ-–±–æ—Ç–µ.
    """
    logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É history".format(message.chat.id))
    history_result[message.chat.id] = dict()
    cursor.execute("""SELECT uq.user_command,
                                       us.command_date,
                                       uq.hotel_name
                            FROM user_query uq
                            JOIN (SELECT user_query_id,
                                               command_date
                                    FROM user_commands
                                    WHERE bot_user_id = :ID
                                    ORDER BY user_query_id DESC 
                                    LIMIT 5) us ON uq.user_query_id = us.user_query_id""", {'ID': message.chat.id})

    for elem in cursor:
        if elem[1] in history_result[message.chat.id].keys() and \
                elem[0] in history_result[message.chat.id][elem[1]].keys():
            history_result[message.chat.id][elem[1]][elem[0]].append(elem[2])
        elif elem[1] in history_result[message.chat.id].keys() and \
                elem[0] not in history_result[message.chat.id][elem[0]].keys():
            history_result[message.chat.id][elem[1]][elem[0]] = []
            history_result[message.chat.id][elem[1]][elem[0]].append(elem[2])
        else:
            history_result[message.chat.id][elem[1]] = {elem[0]: []}
            history_result[message.chat.id][elem[1]][elem[0]].append(elem[2])

    for date, h_value in history_result[message.chat.id].items():
        for h_com, hotels in h_value.items():
            my_bot.send_message(message.chat.id,
                                '–ö–æ–º–∞–Ω–¥–∞: {command}\n'
                                '–î–∞—Ç–∞: {command_date}\n'
                                '–û—Ç–µ–ª–∏:\n   {hotels}'.format(
                                    command=h_com,
                                    command_date=date,
                                    hotels='\n   '.join(hotels)
                                ))
    bot_db.commit()


@logger.catch
@my_bot.message_handler(commands=['lowprice', 'highprice', 'bestdeal'])
def city_requests(message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–æ—Ä–æ–¥–∞.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ-–∫–æ–º–∞–Ω–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ-–±–æ—Ç–µ.
    """
    logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É {}".format(message.chat.id, message.text))
    User(message.chat.id)
    user = User.users[message.chat.id]
    query = user.get_query()
    query.command = message.text[1::]
    msg = my_bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ (–ª—é–±–æ–π, –∫—Ä–æ–º–µ —Ä—É—Å—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤... —Å–∞–Ω–∫—Ü–∏–∏ü§∑ü§∑‚Äç‚ôÄ)')
    my_bot.register_next_step_handler(msg, city_choice)


@logger.catch
@my_bot.message_handler(commands=['rename'])
def rename_command(message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤ –ë–î.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ-–∫–æ–º–∞–Ω–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ-–±–æ—Ç–µ.
    """
    logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É rename".format(message.chat.id))
    msg = my_bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è.')
    my_bot.register_next_step_handler(msg, rename)
