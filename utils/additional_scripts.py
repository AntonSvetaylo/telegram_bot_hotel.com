import re
import requests
import json
from typing import List, Dict
from states.User_cls import User
from loader import my_bot, headers, url, logger


@logger.catch
def convert_str(my_str: str) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É - –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –£–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–µ–µ.
    :param my_str: str - —Å—Ç—Ä–æ–∫–∞ –¥–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.
    :return result: str - —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.
    """
    patterns = [r"<span class='\w+'>", r"(</span>)"]
    result = my_str
    for pattern in patterns:
        result = re.sub(pattern, '', result)
    return result


def request_to_api(url: str, headers: dict, querystring: dict):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç API, –µ
    —Å–ª–∏ –∑–∞–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω—ã–º.
    :param url: str - url-–∞–¥—Ä–µ—Å –ë–î –≤ API, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∑–∞–ø—Ä–æ—Å.
    :param headers: dict - –¢–æ–∫–µ–Ω –∏ –•–æ—Å—Ç API.
    :param querystring: dict - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    :return response - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.
    """
    try:
        response = requests.request('GET', url, headers=headers, params=querystring, timeout=150)
        if response.status_code == requests.codes.ok:
            return response
    except Exception as e:
        logger.debug(e)
        return None


@logger.catch
def check_string(my_str: str) -> List:
    """
    –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ —á–∏—Å–µ–ª, —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param my_str: str - —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: result - —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª.
    """
    pattern = r"\d+"
    result = re.findall(pattern, my_str)
    return result


@logger.catch
def is_digit(string: str) -> bool:
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–∏–º–≤–æ–ª—ã –≤ —Å—Ç—Ä–æ–∫–µ - —ç—Ç–æ —á–∏—Å–ª–æ (—Ü–µ–ª–æ–µ –∏–ª–∏ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π).
    :param string: str - —Å—Ç—Ä–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: return - True –∏–ª–∏ False.
    """
    if string.isdigit():
        return True
    else:
        try:
            float(string)
            return True
        except ValueError:
            return False


@logger.catch
def to_float_or_not_to_float(string: str) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–Ω—è–µ—Ç –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –≤ —Å—Ç—Ä–æ–∫–µ.
    :param string: str - —Å—Ç—Ä–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
    """
    if ',' in string:
        string = string.replace(',', '.')
    return string


@logger.catch
def hotel_for_list(api_hotel: dict, chat_id: int) -> Dict:
    """
    –í —Ä–∞–º–∫–∞—Ö —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ—Ç–µ–ª—é –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API.
    :param api_hotel: dict - –¥–∞–Ω–Ω—ã–µ –æ—Ç–µ–ª—è –∏–∑ API.
    :param chat_id: int - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: hotel - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –ø—è—Ç–∏ –∏—Å–∫–æ–º—ã—Ö –æ—Ç–µ–ª–µ–π.
    """
    try:
        user = User.users[chat_id]
        query = user.get_query()
        hotel = dict()
        hotel['id'] = api_hotel['id']
        hotel['name'] = api_hotel['name']
        hotel['distance'] = api_hotel['landmarks'][0]['distance']

        querystring = {"id": api_hotel['id'], "locale": "ru_RU"}
        response = request_to_api(url=url[3], headers=headers, querystring=querystring)
        data = json.loads(response.text)
        hotel['address'] = data['data']['body']['propertyDescription']['address']['fullAddress']

        hotel['price'] = round(api_hotel['ratePlan']['price']['exactCurrent'])
        hotel['url'] = 'https://hotels.com/ho{hotel_id}'.format(hotel_id=api_hotel['id'])
        if query.photo > 0:
            hotel['photo'] = photo(hotel_id=hotel['id'], chat_id=chat_id)
        return hotel
    except Exception as e:
        logger.debug(e)
        my_bot.send_message(chat_id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üòñ\n'
                                     '–ú–Ω–µ –∂–∞–ª—å, –Ω–æ –ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Åüòî\n'
                                     '‚Üô–í—ã–¥–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –µ—â–µ —Ä–∞–∑.')


@logger.catch
def photo(hotel_id: int, chat_id: int) -> List:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.
    :param hotel_id: int - ID –æ—Ç–µ–ª—è.
    :param chat_id: int - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: photo_list - —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.
    """
    try:
        user = User.users[chat_id]
        query = user.get_query()
        querystring = {"id": hotel_id}
        response = request_to_api(url=url[2], headers=headers, querystring=querystring)
        p_data = json.loads(response.text)
        photo_list = []

        for p in p_data['hotelImages'][0:query.photo]:
            photo_list.append(p['baseUrl'].format(size='z'))
        return photo_list
    except Exception as e:
        logger.debug(e)
        my_bot.send_message(chat_id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üòñ\n'
                                     '–ú–Ω–µ –∂–∞–ª—å, –Ω–æ –ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Åüòî\n'
                                     '‚Üô–í—ã–¥–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –µ—â–µ —Ä–∞–∑.')
