# -*- coding: utf-8 -*-
import json
import sqlite3
import datetime
from loader import my_bot, headers, url, cities, logger
from telebot import types
from states.User_cls import User
from telegram_bot_calendar import DetailedTelegramCalendar
from utils.additional_scripts import request_to_api, check_string, hotel_for_list, is_digit, \
    to_float_or_not_to_float, convert_str


bot_db = sqlite3.connect('database/telegram_bot_db', check_same_thread=False)
cursor = bot_db.cursor()


@logger.catch
def introduce(message) -> None:
    """
     –§—É–Ω–∫—Ü–∏—è-–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
     :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ-–±–æ—Ç–µ.
     """
    logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –≤–≤–µ–ª –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è - {}".format(message.chat.id, message.text))
    cursor.execute("INSERT OR IGNORE INTO users VALUES (?, ?)", (message.from_user.id, message.text))
    bot_db.commit()
    my_bot.send_message(message.chat.id, '–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {}!'
                                         '\n‚Üô–ê —Ç–µ–ø–µ—Ä—å –æ—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.'.format(message.text))


@logger.catch
def rename(message) -> None:
    """
     –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω—è–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î.
     :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ-–±–æ—Ç–µ.
     """
    logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –∏–∑–º–µ–Ω–∏–ª –∏–º—è –Ω–∞ {}".format(message.chat.id, message.text))
    cursor.execute("""UPDATE users
                            SET user_name = :name
                            WHERE bot_user_id = :user_id""", {'name': message.text, 'user_id': message.chat.id})
    bot_db.commit()
    my_bot.send_message(message.chat.id, '–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æüëç\n'
                                         '‚Üô–¢–µ–ø–µ—Ä—å –æ—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É')


@logger.catch
def stop_command(message):
    query = User.users[message.chat.id].get_query()
    logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –∫–æ–º–∞–Ω–¥—É {}".format(message.chat.id, query.command))
    my_bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥–∞ {} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n'
                                         '‚Üô–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É'.format(query.command))


@logger.catch
def city_choice(message) -> None:
    """
    –í —Ä–∞–º–∫–∞—Ö –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ-–±–æ—Ç–µ.
    """
    if message.text == '/stop':
        stop_command(message)
    else:
        logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É–∫–∞–∑–∞–ª –≥–æ—Ä–æ–¥ {}".format(message.chat.id, message.text))
        querystring = {'query': message.text.lower(), 'locale': 'ru_RU'}
        response = request_to_api(url=url[0], headers=headers, querystring=querystring)
        data = json.loads(response.text)
        city_list = data['suggestions'][0]['entities']
        markup = types.InlineKeyboardMarkup()
        item_back = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É', callback_data="city_none")
        if len(city_list) > 0:
            for i in city_list:
                city = convert_str(my_str=i['caption'])
                cities[i['destinationId']] = city
                city_item = types.InlineKeyboardButton(city, callback_data=f"city{i['destinationId']}")
                markup.add(city_item)
            markup.add(item_back)
            my_bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ', reply_markup=markup)
        else:
            logger.debug("–í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {} –≥–æ—Ä–æ–¥ {} –Ω–µ –Ω–∞–π–¥–µ–Ω.".format(message.chat.id, message.text))
            my_bot.send_message(message.chat.id, '–£–ø—Å! –Ø –Ω–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥!')


@logger.catch
def currency(message) -> None:
    """
    –í —Ä–∞–º–∫–∞—Ö –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ-–±–æ—Ç–µ.
    """
    logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—É.".format(message.chat.id))

    markup = types.InlineKeyboardMarkup(row_width=2)
    usd_item = types.InlineKeyboardButton(text="USD", callback_data='USD')
    eur_item = types.InlineKeyboardButton(text='EUR', callback_data='EUR')
    item_back = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É', callback_data="city_none")
    markup.add(usd_item, eur_item, item_back)
    my_bot.send_message(message.chat.id, '–í –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å?', reply_markup=markup)


@logger.catch
def adults(message) -> None:
    """
    –í —Ä–∞–º–∫–∞—Ö –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö –¥–ª—è –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –≤ –æ–¥–Ω–æ–º –Ω–æ–º–µ—Ä–µ.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ-–±–æ—Ç–µ.
    """
    logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –≤—ã–±–∏—Ä–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö, "
                 "–∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø—Ä–æ–∂–∏–≤–∞—Ç—å –≤ –æ–¥–Ω–æ–º –Ω–æ–º–µ—Ä–µ".format(message.chat.id))
    markup = types.InlineKeyboardMarkup(row_width=4)
    item_back = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É', callback_data="city_none")
    items = []
    for n in range(4):
        items.append(types.InlineKeyboardButton(n+1, callback_data=f'adult{n+1}'))
    markup.add(items[0], items[1], items[2], items[3], item_back)
    my_bot.send_message(message.chat.id,  '–î–∞–ª–µ–µ, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø—Ä–æ–∂–∏–≤–∞—Ç—å –≤ –Ω–æ–º–µ—Ä–µ.',
                        reply_markup=markup)


@logger.catch
def children(message) -> None:
    """
    –í —Ä–∞–º–∫–∞—Ö –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è, –±—É–¥—É—Ç –ª–∏ –ø—Ä–æ–∂–∏–≤–∞—Ç—å –≤ –Ω–æ–º–µ—Ä–µ –¥–µ—Ç–∏.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ-–±–æ—Ç–µ.
    """
    logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É—Ç–æ—á–Ω—è–µ—Ç, –±—É–¥—É—Ç –ª–∏ –ø—Ä–æ–∂–∏–≤–∞—Ç—å –≤ –Ω–æ–º–µ—Ä–µ –¥–µ—Ç–∏.".format(message.chat.id))
    markup = types.InlineKeyboardMarkup(row_width=2)
    yes_item = types.InlineKeyboardButton('–î–∞', callback_data='yes')
    no_item = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='no')
    item_back = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É', callback_data="city_none")
    markup.add(yes_item, no_item, item_back)
    my_bot.send_message(message.chat.id, '–î–µ—Ç–∏ –±—É–¥—É—Ç –ø—Ä–æ–∂–∏–≤–∞—Ç—å –≤ –Ω–æ–º–µ—Ä–µ?', reply_markup=markup)


@logger.catch
def children_age(message) -> None:
    """
    –í —Ä–∞–º–∫–∞—Ö –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤–æ–∑—Ä–∞—Å—Ç –¥–µ—Ç–µ–π –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É –∫–ª–∞—Å—Å–∞.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ-–±–æ—Ç–µ.
    """
    logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É–∫–∞–∑–∞–ª –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞/–¥–µ—Ç–µ–π.".format(message.chat.id))
    user = User.users[message.chat.id]
    query = user.get_query()
    ages = check_string(my_str=message.text)
    if len(ages) == 0:
        logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞/–¥–µ—Ç–µ–π.".format(message.chat.id))
        my_bot.send_message(message.chat.id, '–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ª–∏–±–æ –æ–¥–Ω–æ —á–∏—Å–ª–æ,\n'
                                             '–õ–∏–±–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∏—Å–ª–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')
        children(message)
    elif len(ages) > 1:
        query.children = ', '.join(ages)
        my_bot.send_message(message.chat.id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π - {}'.format(len(ages)))
        checkin_date(message)
    else:
        query.children = ages[0]
        my_bot.send_message(message.chat.id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π - {}'.format(len(ages)))
        checkin_date(message)


@logger.catch
def checkin_date(message) -> None:
    """
    –í —Ä–∞–º–∫–∞—Ö –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–∞—Ç–∞ –∑–∞–µ–∑–¥–∞.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ-–±–æ—Ç–µ.
    """
    logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –≤–≤–æ–¥–∏—Ç –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ –≤ –æ—Ç–µ–ª—å.".format(message.chat.id))
    my_bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–∞—Ç–∞–º –∑–∞–µ–∑–¥–∞ –∏ –≤—ã–µ–∑–¥–∞')
    date = datetime.date.today()
    my_calendar, step = DetailedTelegramCalendar(calendar_id=1, locale='ru', min_date=date).build()
    my_bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞.', reply_markup=my_calendar)


@logger.catch
def checkout_date(message) -> None:
    """
    –í —Ä–∞–º–∫–∞—Ö –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–∞—Ç–∞ –∑–∞–µ–∑–¥–∞.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ-–±–æ—Ç–µ.
    """
    logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –≤–≤–æ–¥–∏—Ç –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –∏–∑ –æ—Ç–µ–ª—è.".format(message.chat.id))
    user = User.users[message.chat.id]
    query = user.get_query()
    date = (datetime.datetime.strptime(str(query.check_in), "%Y-%m-%d") + datetime.timedelta(days=1)).date()
    my_calendar, step = DetailedTelegramCalendar(calendar_id=2, locale='ru', min_date=date).build()
    my_bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞.', reply_markup=my_calendar)


@logger.catch
def price(message) -> None:
    """
    –í –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω, –≤ —Ä–∞–º–∫–∞—Ö –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ–∏—Å–∫.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ-–±–æ—Ç–µ.
    """
    logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–∏–µ–º–ª–µ–º—ã—Ö —Ü–µ–Ω.".format(message.chat.id))
    msg = my_bot.send_message(message.chat.id, '–í –∫–∞–∫–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Ü–µ–Ω –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –æ—Ç–µ–ª–∏? '
                                               '(—É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–∞–º–∏: –º–∏–Ω.—Ü–µ–Ω–∞ - –º–∞–∫—Å.—Ü–µ–Ω–∞)')
    my_bot.register_next_step_handler(msg, intermediate_step)


@logger.catch
def intermediate_step(message) -> None:
    """
    –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –≤ —Ä–∞–º–∫–∞—Ö –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ü–µ–Ω.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ-–±–æ—Ç–µ.
    """
    try:
        if message.text == '/stop':
            stop_command(message)
        else:
            result = check_string(my_str=message.text)
            if int(result[0]) > int(result[1]):
                logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª —Ü–µ–Ω—ã. "
                             "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π.".format(message.chat.id))
                my_bot.send_message(message.chat.id, '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã.')
                price(message)
            elif len(result) > 2:
                logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª —Ü–µ–Ω—ã (–±–æ–ª—å—à–µ –¥–≤—É—Ö —á–∏—Å–µ–ª)".format(message.chat.id))
                my_bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –∏–∑ –¥–≤—É—Ö —Ü–µ–Ω.')
                price(message)
            else:
                logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª —Ü–µ–Ω—ã.".format(message.chat.id))
                user = User.users[message.chat.id]
                query = user.get_query()
                query.minprice = int(result[0])
                query.maxprice = int(result[1])
                distance_to_center(message)
    except IndexError:
        logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª —Ü–µ–Ω—ã. –í–º–µ—Å—Ç–æ —Ü–∏—Ñ—Ä —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç.".format(message.chat.id))
        my_bot.send_message(message.chat.id, '‚ùó‚ùó‚ùó–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–∞–º–∏‚ùó‚ùó‚ùó')
        price(message)


@logger.catch
def distance_to_center(message) -> None:
    """
    –í —Ä–∞–º–∫–∞—Ö –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ-–±–æ—Ç–µ.
    """
    logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞.".format(message.chat.id))
    msg = my_bot.send_message(message.chat.id, '–î–∞–ª–µ–µ —É–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≤ –∫–º.')
    my_bot.register_next_step_handler(msg, intermediate_step_two)


@logger.catch
def intermediate_step_two(message) -> None:
    """
    –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –≤ —Ä–∞–º–∫–∞—Ö –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ —Ü–µ–Ω—Ç—Ä–∞.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ-–±–æ—Ç–µ.
    """
    if message.text == '/stop':
        stop_command(message)
    else:
        user_distance = to_float_or_not_to_float(message.text)
        if is_digit(string=user_distance):
            logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞.".format(message.chat.id))
            user = User.users[message.chat.id]
            query = user.get_query()
            query.max_distance = float(message.text)
            adults(message)
        else:
            logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞.".format(message.chat.id))
            my_bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞. '
                                                 '–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ')
            distance_to_center(message)


@logger.catch
def photo(message) -> None:
    """
    –í —Ä–∞–º–∫–∞—Ö –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∫ –æ—Ç–µ–ª—è–º.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ-–±–æ—Ç–µ.
    """
    logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É—Ç–æ—á–Ω—è–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –≤—ã–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ.".format(message.chat.id))
    markup = types.InlineKeyboardMarkup(row_width=2)
    yes_item = types.InlineKeyboardButton(text='–¥–∞', callback_data='photo:yes')
    no_item = types.InlineKeyboardButton(text='–Ω–µ—Ç', callback_data='photo:no')
    item_back = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É', callback_data="city_none")
    markup.add(yes_item, no_item, item_back)
    my_bot.send_message(message.chat.id, '–í—ã–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏?', reply_markup=markup)


def query_to_api(message) -> None:
    """
    –í —Ä–∞–º–∫–∞—Ö –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ '—Å–æ–±–∏—Ä–∞–µ—Ç—Å—è' –∑–∞–ø—Ä–æ—Å –∫ API Hotels.com,
    –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏, —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –¥–∞–ª–µ–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∑–∞–ø—Ä–æ—Å –∫ API,
    –ø–æ—Å–ª–µ —á–µ–≥–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ-–±–æ—Ç–µ.
    """
    try:
        logger.debug("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤—ã–≥—Ä—É–∑–∫–∞ –∏–∑ API –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}.".format(message.chat.id))
        user = User.users[message.chat.id]
        query = user.get_query()
        querystring = {"destinationId": query.destinationid,
                       "pageNumber": "1",
                       "pageSize": "25",
                       "checkIn": query.check_in,
                       "checkOut": query.check_out,
                       "adults1": query.adults,
                       "sortOrder": query.sortorder,
                       "locale": "ru_RU",
                       "currency": query.currency}
        if query.children != '':
            querystring["children1"] = query.children

        response = request_to_api(url=url[1], headers=headers, querystring=querystring)
        data = json.loads(response.text)

        hotels = []
        if query.command == 'lowprice':

            for h in data['data']['body']['searchResults']['results'][:5]:
                hotel = hotel_for_list(api_hotel=h, chat_id=message.chat.id)
                hotels.append(hotel)
        elif query.command == 'highprice':
            for h in data['data']['body']['searchResults']['results'][-5::1]:
                hotel = hotel_for_list(api_hotel=h, chat_id=message.chat.id)
                hotels.append(hotel)
        elif query.command == 'bestdeal':
            for h in data['data']['body']['searchResults']['results']:
                distance_to_center_api = h['landmarks'][0]['distance'].split()
                distance_to_center_api[0] = distance_to_center_api[0].replace(',', '.')
                if query.minprice <= round(h['ratePlan']['price']['exactCurrent']) <= query.maxprice\
                        and float(distance_to_center_api[0]) <= query.max_distance:
                    hotel = hotel_for_list(api_hotel=h, chat_id=message.chat.id)
                    hotels.append(hotel)
                if len(hotels) == 5:
                    break

        query.result = hotels

        if len(hotels) == 0:
            logger.debug("–ü–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–µ–ª—è.".format(message.chat.id))
            my_bot.send_message(message.chat.id, '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–µ–ª—è üòû')
        else:
            logger.debug("–ó–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.".format(message.chat.id))
            for hotel in hotels:
                cursor.execute("""INSERT INTO user_query(bot_user_id,
                                user_command,
                                hotel_name,
                                hotel_address,
                                hotel_price,
                                currency,
                                hotel_distance,
                                URL_hotel) 
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)""", (
                                                                message.chat.id,
                                                                query.command,
                                                                hotel['name'],
                                                                hotel['address'],
                                                                hotel['price'],
                                                                query.currency,
                                                                hotel['distance'],
                                                                hotel['url']
                                                                ))
                bot_db.commit()

                if query.photo > 0:
                    photos = []
                    for photo in hotel['photo']:
                        photos.append(types.InputMediaPhoto(photo))
                    my_bot.send_media_group(message.chat.id, photos)
                my_bot.send_message(message.chat.id, ''
                                                     '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {hotel_name}\n'
                                                     '–ê–¥—Ä–µ—Å: {address}\n'
                                                     '–¶–µ–Ω–∞ –∑–∞ —Å—É—Ç–∫–∏: {price_per_day} '
                                                     '{currency}\n'
                                                     '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞: {distance}\n'
                                                     'URL: {url}'.format(
                                                                                hotel_name=hotel['name'],
                                                                                address=hotel['address'],
                                                                                price_per_day=hotel['price'],
                                                                                currency=query.currency,
                                                                                distance=hotel['distance'],
                                                                                url=hotel['url']
                                                     ), disable_web_page_preview=True
                                    )
            cursor.execute("""INSERT INTO user_commands VALUES (NULL, ?, ?, ?)""",
                           (message.chat.id, query.command, datetime.datetime.now()))

            cursor.execute("""UPDATE user_query
                                    SET user_query_id = (
                                                            SELECT user_query_id
                                                            FROM user_commands
                                                            WHERE user_commands.command_name = user_query.user_command
                                                                AND user_commands.bot_user_id = user_query.bot_user_id
                                                            ORDER BY user_commands.command_date DESC
                                                            LIMIT 1
                                                            )
                                    WHERE user_query_id IS NULL
                                    """)
            bot_db.commit()
            my_bot.send_message(message.chat.id, '=' * 20)
        my_bot.send_message(message.chat.id, '–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ú–æ–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É.')
    except Exception as e:
        my_bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üòñ\n'
                                             '–ú–Ω–µ –∂–∞–ª—å, –Ω–æ –ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Åüòî\n'
                                             '‚Üô–í—ã–¥–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –µ—â–µ —Ä–∞–∑.')
        logger.debug(e)
